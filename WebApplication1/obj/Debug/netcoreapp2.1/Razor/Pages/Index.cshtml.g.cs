#pragma checksum "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "16d3c49a9cbb7e9f430bf6b343899af92f209c49"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(WebApplication1.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/Index.cshtml", typeof(WebApplication1.Pages.Pages_Index), null)]
namespace WebApplication1.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\_ViewImports.cshtml"
using WebApplication1;

#line default
#line hidden
#line 7 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
using System.Web;

#line default
#line hidden
#line 8 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
using Newtonsoft.Json;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"16d3c49a9cbb7e9f430bf6b343899af92f209c49", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"668cc64a084232eafef8610da2704d38f65e7f86", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 3 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
  
    ViewData["Title"] = "부산 어린이 보호구역 알리미";


#line default
#line hidden
            BeginContext(124, 5349, true);
            WriteLiteral(@"
<div>

</div>
<div id=""map"" style=""width:100%;height:550px;""></div>

<style>

    .dot {
        overflow: hidden;
        float: left;
        width: 12px;
        height: 12px;
    }

    .dotOverlay {
        position: relative;
        bottom: 10px;
        border-radius: 6px;
        border: 1px solid #ccc;
        border-bottom: 2px solid #ddd;
        float: left;
        font-size: 12px;
        padding: 5px;
        background: #fff;
    }

        .dotOverlay:nth-of-type(n) {
            border: 0;
            box-shadow: 0px 1px 2px #888;
        }

    .number {
        font-weight: bold;
        color: #ee6152;
    }

    .dotOverlay:after {
        content: '';
        position: absolute;
        margin-left: -6px;
        left: 50%;
        bottom: -8px;
        width: 11px;
        height: 8px;
    }

    .distanceInfo {
        position: relative;
        top: 5px;
        left: 5px;
        list-style: none;
        margin: 0;
    }

  ");
            WriteLiteral(@"      .distanceInfo .label {
            display: inline-block;
            width: 50px;
        }

        .distanceInfo:after {
            content: none;
        }

    .button {
        background-color: #4CAF50; /* Green */
        border: none;
        color: white;
        padding: 16px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        -webkit-transition-duration: 0.4s; /* Safari */
        transition-duration: 0.4s;
        cursor: pointer;
    }

    .button3 {
        background-color: white;
        color: black;
        border: 2px solid black;
    }
</style>

<script src=""https://sdk.amazonaws.com/js/aws-sdk-2.7.16.min.js""></script>
<script type=""text/javascript"" src=""//dapi.kakao.com/v2/maps/sdk.js?appkey=879b349c5d1c43ed76d183cea539a546&libraries=services""></script>
<script>
    AWS.config.update({
        region: ""ap-northeast-2"",
        //endpoint: 'http");
            WriteLiteral(@"s://dynamodb.ap-northeast-2.amazonaws.com',
        accessKeyId: ""AKIA366CUESD7BIROQUY"",
        secretAccessKey: ""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""
    });

    var docClient = new AWS.DynamoDB.DocumentClient();
    var acclat = new Array();
    var acclongt = new Array();
    var circlearray = new Array();
    for (var i = 1; i < 46; i++) {
        var params = {
            TableName: ""sillacloudddb"",
            KeyConditionExpression: ""#id = :id"",
            ExpressionAttributeNames: {
                ""#id"": ""id""
            },
            ExpressionAttributeValues: {
                "":id"": i
            }

        };

        docClient.query(params, function (err, data) {
            if (err) {
            } else {
                var items = JSON.stringify(data.Items, undefined, 2);
                var a = items.toString();
                var b = a.replace('[', '');
                var c = b.replace(']', '');
                var item23 = JSON.parse(c);
          ");
            WriteLiteral(@"      var circle = new kakao.maps.Circle({
                    center: new kakao.maps.LatLng(item23.lat, item23.long),
                    radius: 100,
                    strokeWeight: 1,
                    strokeColor: '#FF0000',
                    strokeOpacity: 0.5,
                    strokeStyle: 'line',
                    fillColor: '#FF0000',
                    fillOpacity: 0.2
                });
                circle.setMap(map);
                circlearray.push(circle);

            }
        });
    }



    var drawingFlag = false;
    var moveLine;
    var clickLine;
    var distanceOverlay;
    var dots = {};
    var posiLat = new Array();
    var posiLng = new Array();
    var mapContainer = document.getElementById('map'),
        mapOption = {
            center: new kakao.maps.LatLng(33.450701, 126.570667),
            level: 8
        };
    var geoloc;
    var geolat;
    var geolng;
    var map = new kakao.maps.Map(mapContainer, mapOption);

    if");
            WriteLiteral(@" (navigator.geolocation) {
        navigator.geolocation.watchPosition(function (position) {

            var lat = position.coords.latitude,
                lon = position.coords.longitude;
            geoloc = new kakao.maps.LatLng(lat, lon);
            geolat = lat;
            geolng = lon;
            var locPosition = new kakao.maps.LatLng(lat, lon),
                message = '<div style=""padding:5px;"">현 위치</div>';
            displayMarker(locPosition, message);

        });

    } else {
        var locPosition = new kakao.maps.LatLng(33.450701, 126.570667),
            message = 'GPS를 사용할수 없어요..'
        displayMarker(locPosition, message);
    }

    function displayMarker(locPosition, message) {
        var marker = new kakao.maps.Marker({
            map: map,
            position: locPosition
        });

        var iwContent = message,
            iwRemoveable = true;
        var infowindow = new kakao.maps.InfoWindow({
            content: iwContent,
            ");
            WriteLiteral("removable: iwRemoveable\r\n        });\r\n        infowindow.open(map, marker);\r\n        map.setCenter(locPosition);\r\n    }\r\n\r\n    var geocoder = new kakao.maps.services.Geocoder();\r\n    var positions = new Array();\r\n    var addr1 = ");
            EndContext();
            BeginContext(5474, 39, false);
#line 204 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
           Write(Html.Raw(Json.Serialize(Program.addr1)));

#line default
#line hidden
            EndContext();
            BeginContext(5513, 17, true);
            WriteLiteral(";\r\n    var lat = ");
            EndContext();
            BeginContext(5531, 37, false);
#line 205 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
         Write(Html.Raw(Json.Serialize(Program.lat)));

#line default
#line hidden
            EndContext();
            BeginContext(5568, 17, true);
            WriteLiteral(";\r\n    var lng = ");
            EndContext();
            BeginContext(5586, 39, false);
#line 206 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
         Write(Html.Raw(Json.Serialize(Program.longt)));

#line default
#line hidden
            EndContext();
            BeginContext(5625, 20, true);
            WriteLiteral(";\r\n    var iscctv = ");
            EndContext();
            BeginContext(5646, 40, false);
#line 207 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
            Write(Html.Raw(Json.Serialize(Program.iscctv)));

#line default
#line hidden
            EndContext();
            BeginContext(5686, 19, true);
            WriteLiteral(";\r\n    var sname = ");
            EndContext();
            BeginContext(5706, 39, false);
#line 208 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
           Write(Html.Raw(Json.Serialize(Program.sname)));

#line default
#line hidden
            EndContext();
            BeginContext(5745, 19, true);
            WriteLiteral(";\r\n    var stype = ");
            EndContext();
            BeginContext(5765, 39, false);
#line 209 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
           Write(Html.Raw(Json.Serialize(Program.stype)));

#line default
#line hidden
            EndContext();
            BeginContext(5804, 7157, true);
            WriteLiteral(@";
    var imageSrc = ""https://sillacloudtest.file.core.windows.net/abc/markerStar2.png"";
    for (var i = 0; i < 1450; i++) {
        var imageSize = new kakao.maps.Size(24, 35);
        var coords = new kakao.maps.LatLng(lat[i], lng[i]);
        var titlegap = sname[i];
        var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize);
        var marker = new kakao.maps.Marker({
            map: map,
            position: coords,
            title: titlegap,
            image: markerImage
        });
        var circle = new kakao.maps.Circle({
            center: new kakao.maps.LatLng(lat[i],lng[i]),
            radius: 200,
            strokeWeight: 1,
            strokeColor: '#FFFF00',
            strokeOpacity: 0.5,
            strokeStyle: 'line',
            fillColor: '#FFFF00',
            fillOpacity: 0.2
        });
        circle.setMap(map);
    }
    for (var i = 0; i < 45; i++) {

    }
    var mapTypes = {
        terrain: kakao.maps.MapTypeId.TERRAIN,
 ");
            WriteLiteral(@"       traffic: kakao.maps.MapTypeId.TRAFFIC,
        bicycle: kakao.maps.MapTypeId.BICYCLE,
        useDistrict: kakao.maps.MapTypeId.USE_DISTRICT
    };
    //map.addOverlayMapTypeId(mapTypes.traffic);
    function deleteClickLine() {
        if (clickLine) {
            clickLine.setMap(null);
            clickLine = null;
        }
    }

    function showDistance(content, position) {

        if (distanceOverlay) {
            distanceOverlay.setPosition(position);
            distanceOverlay.setContent(content);
        } else {
            distanceOverlay = new kakao.maps.CustomOverlay({
                map: map,
                content: content,
                position: position,
                xAnchor: 0,
                yAnchor: 0,
                zIndex: 3
            });
        }
    }

    function deleteDistnce() {
        if (distanceOverlay) {
            distanceOverlay.setMap(null);
            distanceOverlay = null;
        }
    }

    function displ");
            WriteLiteral(@"ayCircleDot(position, distance) {
        var circleOverlay = new kakao.maps.CustomOverlay({
            content: '<span class=""dot""></span>',
            position: position,
            zIndex: 1
        });

        circleOverlay.setMap(map);

        if (distance > 0) {
            var distanceOverlay = new kakao.maps.CustomOverlay({
                content: '<div class=""dotOverlay"">거리 <span class=""number"">' + distance + '</span>m</div>',
                position: position,
                yAnchor: 1,
                zIndex: 2
            });
            distanceOverlay.setMap(map);
        }
        dots.push({ circle: circleOverlay, distance: distanceOverlay });
    }

    function deleteCircleDot() {
        var i;

        for (i = 0; i < dots.length; i++) {
            if (dots[i].circle) {
                dots[i].circle.setMap(null);
            }

            if (dots[i].distance) {
                dots[i].distance.setMap(null);
            }
        }

        dots");
            WriteLiteral(@" = [];
    }

    var currentbell;

    function getNearArea() {

        currentbell = 0;
        var mingap = 0.0;
        var calgap = 0.0;
        for (var i = 0; i < 1450; i++) {
            // alert(geolat+'+'+posiLat[i]);
            calgap = Math.sqrt(Math.pow(geolat - lat[i], 2) + Math.pow(geolng - lng[i], 2));
            if (i == 0)
                mingap = calgap;
            else
                if (mingap > calgap) {
                    mingap = calgap;
                    currentbell = i;
                }
            //alert(calgap);
        }
        //alert(currentbell);
        var clickPosition = new kakao.maps.LatLng(geolat, geolng);
        deleteClickLine();
        deleteDistnce();
        deleteCircleDot();
        clickLine = new kakao.maps.Polyline({
            map: map,
            path: [clickPosition],
            strokeWeight: 0,
            strokeColor: '#db4040',
            strokeOpacity: 0,
            strokeStyle: 'solid'
        });

  ");
            WriteLiteral(@"      moveLine = new kakao.maps.Polyline({
            strokeWeight: 0,
            strokeColor: '#db4040',
            strokeOpacity: 0,
            strokeStyle: 'solid'
        });

        displayCircleDot(clickPosition, 0);
        var path = clickLine.getPath();
        var setPosition = new kakao.maps.LatLng(lat[currentbell], lng[currentbell]);
        path.push(setPosition);
        clickLine.setPath(path);
        var distance = Math.round(clickLine.getLength());
        displayCircleDot(setPosition, distance);
        var path = clickLine.getPath();

        if (path.length > 1) {
            if (dots[dots.length - 1].distance) {
                dots[dots.length - 1].distance.setMap(null);
                dots[dots.length - 1].distance = null;
            }

            var distance = Math.round(clickLine.getLength())

            //showDistance(content, path[path.length - 1]);

        } else {
            deleteClickLine();
            deleteCircleDot();
            del");
            WriteLiteral(@"eteDistnce();
        }
        map.setCenter(setPosition);
        checkDistance(distance,currentbell);
    }

    function checkDistance(distance, count) {

        if (distance < 200) {
            alert(""어린이 보호구역에 진입하였습니다."");
            var schoolinfo = new Object();
            schoolinfo.name = sname[count];
            schoolinfo.addr = addr1[count];
            var obj_s = JSON.stringify(schoolinfo, null, ""\t"");
            var dataUri = ""data:application/json;charset=utf-8,"" + encodeURIComponent(obj_s);
            var link = $(""#link"").attr(""href"", dataUri);
            var bucket = new AWS.S3({ params: { Bucket: 'sillaclouddatareceive' } });


            var params = {
                Key: 'senddata.json',
                ContentType: 'json',
                Body: obj_s,
                ACL: 'public-read'
            };

            bucket.putObject(params, function (err, data) {
                if (err)
                    console.log(err);
            });
        }");
            WriteLiteral(@"

    }

    window.onload = getNearArea;

    function getCurrentLoc() {
        if (navigator.geolocation) {
            navigator.geolocation.watchPosition(function (position) {

                var lat = position.coords.latitude,
                    lon = position.coords.longitude;
                geoloc = new kakao.maps.LatLng(lat, lon);
                geolat = lat;
                geolng = lon;
                var locPosition = new kakao.maps.LatLng(lat, lon),
                    message = '<div style=""padding:5px;"">현 위치</div>';
                displayMarker(locPosition, message);

            });

        } else {
            var locPosition = new kakao.maps.LatLng(33.450701, 126.570667),
                message = 'GPS를 사용할수 없어요..'
            displayMarker(locPosition, message);
        }
        getNearArea();
    }
</script>
<div align=""center"">

    <button class=""button button3"" onclick=""getCurrentLoc()"">현재위치 체크</button>
    <p id=""addr""></p>

</div>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
