#pragma checksum "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "274c62bd3f8f66f3cb1e5621fbb9d064031e770b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(WebApplication1.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/Index.cshtml", typeof(WebApplication1.Pages.Pages_Index), null)]
namespace WebApplication1.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\_ViewImports.cshtml"
using WebApplication1;

#line default
#line hidden
#line 7 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
using System.Web;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"274c62bd3f8f66f3cb1e5621fbb9d064031e770b", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"668cc64a084232eafef8610da2704d38f65e7f86", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 3 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
  
    ViewData["Title"] = "부산 어린이 보호구역 알리미";


#line default
#line hidden
            BeginContext(99, 3372, true);
            WriteLiteral(@"
<div>
    <p>부산광역시 지도</p>
    <p>현재 위치는 파란색 마커</p>
    <p>안심벨은 노란색 마커</p>
</div>
<div id=""map"" style=""width:100%;height:550px;""></div>

<style>

    .dot {
        overflow: hidden;
        float: left;
        width: 12px;
        height: 12px;
        background: url('http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/mini_circle.png');
    }

    .dotOverlay {
        position: relative;
        bottom: 10px;
        border-radius: 6px;
        border: 1px solid #ccc;
        border-bottom: 2px solid #ddd;
        float: left;
        font-size: 12px;
        padding: 5px;
        background: #fff;
    }

        .dotOverlay:nth-of-type(n) {
            border: 0;
            box-shadow: 0px 1px 2px #888;
        }

    .number {
        font-weight: bold;
        color: #ee6152;
    }

    .dotOverlay:after {
        content: '';
        position: absolute;
        margin-left: -6px;
        left: 50%;
        bottom: -8px;
        width: 11px;
        ");
            WriteLiteral(@"height: 8px;
        background: url('http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/vertex_white_small.png')
    }

    .distanceInfo {
        position: relative;
        top: 5px;
        left: 5px;
        list-style: none;
        margin: 0;
    }

        .distanceInfo .label {
            display: inline-block;
            width: 50px;
        }

        .distanceInfo:after {
            content: none;
        }
</style>
<script type=""text/javascript"" src=""//dapi.kakao.com/v2/maps/sdk.js?appkey=879b349c5d1c43ed76d183cea539a546&libraries=services""></script>
<script>
    var drawingFlag = false;
    var moveLine;
    var clickLine;
    var distanceOverlay;
    var dots = {};
    var posiLat = new Array();
    var posiLng = new Array();
    var mapContainer = document.getElementById('map'),
        mapOption = {
            center: new kakao.maps.LatLng(33.450701, 126.570667),
            level: 8
        };
    var geoloc;
    var geolat;
    var geolng;
   ");
            WriteLiteral(@" var map = new kakao.maps.Map(mapContainer, mapOption);

    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {

            var lat = position.coords.latitude,
                lon = position.coords.longitude;
            geoloc = new kakao.maps.LatLng(lat, lon);
            geolat = lat;
            geolng = lon;
            var locPosition = new kakao.maps.LatLng(lat, lon),
                message = '<div style=""padding:5px;"">현재 위치</div>';
            displayMarker(locPosition, message);

        });

    } else {
        var locPosition = new kakao.maps.LatLng(33.450701, 126.570667),
            message = 'GPS를 사용할수 없어요..'
        displayMarker(locPosition, message);
    }

    function displayMarker(locPosition, message) {
        var marker = new kakao.maps.Marker({
            map: map,
            position: locPosition
        });

        var iwContent = message,
            iwRemoveable = true;
        var infowindow = new");
            WriteLiteral(@" kakao.maps.InfoWindow({
            content: iwContent,
            removable: iwRemoveable
        });
        infowindow.open(map, marker);
        map.setCenter(locPosition);
    }

    var geocoder = new kakao.maps.services.Geocoder();
    var positions = new Array();
    var addr1 = ");
            EndContext();
            BeginContext(3472, 39, false);
#line 133 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
           Write(Html.Raw(Json.Serialize(Program.addr1)));

#line default
#line hidden
            EndContext();
            BeginContext(3511, 17, true);
            WriteLiteral(";\r\n    var lat = ");
            EndContext();
            BeginContext(3529, 37, false);
#line 134 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
         Write(Html.Raw(Json.Serialize(Program.lat)));

#line default
#line hidden
            EndContext();
            BeginContext(3566, 17, true);
            WriteLiteral(";\r\n    var lng = ");
            EndContext();
            BeginContext(3584, 39, false);
#line 135 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
         Write(Html.Raw(Json.Serialize(Program.longt)));

#line default
#line hidden
            EndContext();
            BeginContext(3623, 20, true);
            WriteLiteral(";\r\n    var iscctv = ");
            EndContext();
            BeginContext(3644, 40, false);
#line 136 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
            Write(Html.Raw(Json.Serialize(Program.iscctv)));

#line default
#line hidden
            EndContext();
            BeginContext(3684, 19, true);
            WriteLiteral(";\r\n    var sname = ");
            EndContext();
            BeginContext(3704, 39, false);
#line 137 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
           Write(Html.Raw(Json.Serialize(Program.sname)));

#line default
#line hidden
            EndContext();
            BeginContext(3743, 19, true);
            WriteLiteral(";\r\n    var stype = ");
            EndContext();
            BeginContext(3763, 39, false);
#line 138 "C:\Users\artfj\Desktop\2020CloudTest\WebApplication1\Pages\Index.cshtml"
           Write(Html.Raw(Json.Serialize(Program.stype)));

#line default
#line hidden
            EndContext();
            BeginContext(3802, 6693, true);
            WriteLiteral(@";
    var imageSrc = ""http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png"";
    for (var i = 0; i < 1450; i++) {
        var imageSize = new kakao.maps.Size(24, 35);
        var coords = new kakao.maps.LatLng(lat[i], lng[i]);
        var titlegap = sname[i];
        var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize);
        var marker = new kakao.maps.Marker({
            map: map,
            position: coords,
            title: titlegap,
            image: markerImage
        });
        var circle = new kakao.maps.Circle({
            center: new kakao.maps.LatLng(lat[i],lng[i]),  // 원의 중심좌표 입니다
            radius: 200, // 미터 단위의 원의 반지름입니다
            strokeWeight: 2, // 선의 두께입니다
            strokeColor: '#FFFF00', // 선의 색깔입니다
            strokeOpacity: 0.5, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
            strokeStyle: 'line', // 선의 스타일 입니다
            fillColor: '#FFFF00', // 채우기 색깔입니다
            fillOpacity: 0.2  // 채우기 불투명도 입니다
        });");
            WriteLiteral(@"
        circle.setMap(map);
    }

    function deleteClickLine() {
        if (clickLine) {
            clickLine.setMap(null);
            clickLine = null;
        }
    }

    function showDistance(content, position) {

        if (distanceOverlay) {
            distanceOverlay.setPosition(position);
            distanceOverlay.setContent(content);
        } else {
            distanceOverlay = new kakao.maps.CustomOverlay({
                map: map,
                content: content,
                position: position,
                xAnchor: 0,
                yAnchor: 0,
                zIndex: 3
            });
        }
    }

    function deleteDistnce() {
        if (distanceOverlay) {
            distanceOverlay.setMap(null);
            distanceOverlay = null;
        }
    }

    function displayCircleDot(position, distance) {
        var circleOverlay = new kakao.maps.CustomOverlay({
            content: '<span class=""dot""></span>',
            position: p");
            WriteLiteral(@"osition,
            zIndex: 1
        });

        circleOverlay.setMap(map);

        if (distance > 0) {
            var distanceOverlay = new kakao.maps.CustomOverlay({
                content: '<div class=""dotOverlay"">거리 <span class=""number"">' + distance + '</span>m</div>',
                position: position,
                yAnchor: 1,
                zIndex: 2
            });
            distanceOverlay.setMap(map);
        }
        dots.push({ circle: circleOverlay, distance: distanceOverlay });
    }

    function deleteCircleDot() {
        var i;

        for (i = 0; i < dots.length; i++) {
            if (dots[i].circle) {
                dots[i].circle.setMap(null);
            }

            if (dots[i].distance) {
                dots[i].distance.setMap(null);
            }
        }

        dots = [];
    }

    function getTimeHTML(distance) {
        var walkkTime = distance / 67 | 0;
        var walkHour = '', walkMin = '';

        if (walkkTime > 60");
            WriteLiteral(@") {
            walkHour = '<span class=""number"">' + Math.floor(walkkTime / 60) + '</span>시간 '
        }
        walkMin = '<span class=""number"">' + walkkTime % 60 + '</span>분'

        var bycicleTime = distance / 227 | 0;
        var bycicleHour = '', bycicleMin = '';

        if (bycicleTime > 60) {
            bycicleHour = '<span class=""number"">' + Math.floor(bycicleTime / 60) + '</span>시간 '
        }
        bycicleMin = '<span class=""number"">' + bycicleTime % 60 + '</span>분'

        var content = '<ul class=""dotOverlay distanceInfo"">';
        content += '    <li>';
        content += '        <span class=""label"" style=""color:black"">총거리</span><span class=""number"">' + distance + '</span>m';
        content += '    </li>';
        content += '    <li>';
        content += '        <span class=""label"" style=""color:black"">도보</span>' + walkHour + walkMin;
        content += '    </li>';
        content += '    <li>';
        content += '        <span class=""label"" style=""color:black"">자");
            WriteLiteral(@"전거</span>' + bycicleHour + bycicleMin;
        content += '    </li>';
        content += '</ul>'

        return content;
    }
    var currentbell;
    function getNearBell() {
        currentbell = 0;
        var mingap = 0.0;
        var calgap = 0.0;
        for (var i = 0; i < 81; i++) {
           // alert(geolat+'+'+posiLat[i]);
            calgap = Math.sqrt(Math.pow(geolat - posiLat[i], 2) + Math.pow(geolng - posiLng[i], 2));
            if (i == 0)
                mingap = calgap;
            else
                if (mingap > calgap) {
                    mingap = calgap;
                    currentbell = i;
                }
            //alert(calgap);
        }
       // alert(currentbell);
        var clickPosition = new kakao.maps.LatLng(geolat, geolng);
        deleteClickLine();
        deleteDistnce();
        deleteCircleDot();
        clickLine = new kakao.maps.Polyline({
            map: map,
            path: [clickPosition],
            strokeWeight: 3,
");
            WriteLiteral(@"            strokeColor: '#db4040',
            strokeOpacity: 1,
            strokeStyle: 'solid'
        });

        moveLine = new kakao.maps.Polyline({
            strokeWeight: 3,
            strokeColor: '#db4040',
            strokeOpacity: 0.5,
            strokeStyle: 'solid'
        });

        displayCircleDot(clickPosition, 0);
        var path = clickLine.getPath();
        var setPosition = new kakao.maps.LatLng(posiLat[currentbell], posiLng[currentbell]);
        path.push(setPosition);
        clickLine.setPath(path);
        var distance = Math.round(clickLine.getLength());
        displayCircleDot(setPosition, distance);
        var path = clickLine.getPath();

        if (path.length > 1) {
            if (dots[dots.length - 1].distance) {
                dots[dots.length - 1].distance.setMap(null);
                dots[dots.length - 1].distance = null;
            }

            var distance = Math.round(clickLine.getLength()),
                content = getTim");
            WriteLiteral(@"eHTML(distance);

            showDistance(content, path[path.length - 1]);

        } else {
            deleteClickLine();
            deleteCircleDot();
            deleteDistnce();
        }
        map.setCenter(setPosition);
        var sample = document.getElementById(""addr"");
        //getNearBell();
        var gap = addr1[currentbell];
        //alert(gap);
        sample.innerHTML = gap;
    }

</script>
<div>근처  위치 찾기</div>
<input id=""Button1"" type=""button"" value=""찾기"" onclick=""getNearBell()"" />
<p id=""addr""></p>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
